import React, { useState, useEffect } from "react";
import axios from "axios";
import Tooltip from "../../components/Tooltip";
import { MapContainer, TileLayer, Marker, Popup } from "react-leaflet"; // Import OpenStreetMap
import "leaflet/dist/leaflet.css"; // CSS cho OpenStreetMap
import { tailwindConfig } from "../../utils/Utils";
import { variables } from '../../utils/variables';


function WeatherChart() {
    const API_URL = variables.WEATHER;
    const [location, setLocation] = useState({ lat: null, lon: null });
    const [weatherData, setWeatherData] = useState(null);
    const [address, setAddress] = useState("ƒêang l·∫•y v·ªã tr√≠...");
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    // L·∫•y v·ªã tr√≠ c·ªßa ng∆∞·ªùi d√πng
    useEffect(() => {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    console.log("T·ªça ƒë·ªô ng∆∞·ªùi d√πng:", position.coords.latitude, position.coords.longitude);
                    setLocation({
                        lat: position.coords.latitude,
                        lon: position.coords.longitude,
                    });
                },
                (error) => {
                    console.error("L·ªói l·∫•y v·ªã tr√≠:", error);
                    setError("Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠. H√£y b·∫≠t GPS.");
                }
            );
        } else {
            setError("Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ Geolocation.");
        }
    }, []);

    // G·ªçi API khi l·∫•y ƒë∆∞·ª£c v·ªã tr√≠
    useEffect(() => {
        if (location.lat && location.lon) {
            fetchWeatherData();
            fetchAddress();
        }
    }, [location]);

    // G·ªçi API backend ƒë·ªÉ l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt t·ª´ OpenWeather
    const fetchWeatherData = async () => {
        if (!location.lat || !location.lon) return;

        setLoading(true);
        try {
            const response = await axios.get(
                `${API_URL}/location?lat=${location.lat}&lon=${location.lon}`
            );

            console.log("D·ªØ li·ªáu th·ªùi ti·∫øt nh·∫≠n ƒë∆∞·ª£c:", response.data); // Log d·ªØ li·ªáu API
            setWeatherData(response.data);
        } catch (error) {
            console.error("L·ªói khi l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt:", error);
            setError("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt.");
        }
        setLoading(false);
    };


    // G·ªçi OpenStreetMap Nominatim API ƒë·ªÉ l·∫•y ƒë·ªãa ch·ªâ c·ª• th·ªÉ
    const fetchAddress = async () => {
        try {
            const response = await axios.get(
                `https://nominatim.openstreetmap.org/reverse?lat=${location.lat}&lon=${location.lon}&format=json`
            );

            if (response.data.display_name) {
                setAddress(response.data.display_name);
            } else {
                setAddress("Kh√¥ng x√°c ƒë·ªãnh v·ªã tr√≠");
            }
        } catch (error) {
            console.error("L·ªói khi l·∫•y ƒë·ªãa ch·ªâ:", error);
            setAddress("Kh√¥ng th·ªÉ l·∫•y ƒë·ªãa ch·ªâ");
        }
    };

    // D·ªØ li·ªáu cho bi·ªÉu ƒë·ªì nhi·ªát ƒë·ªô v√† ƒë·ªô ·∫©m
    const temperatureData = weatherData ? [weatherData.main.temp] : [0];
    const humidityData = weatherData ? [weatherData.main.humidity] : [0];

    const chartData = {
        labels: ["Hi·ªán t·∫°i"],
        datasets: [
            {
                label: "Nhi·ªát ƒë·ªô (¬∞C)",
                data: temperatureData,
                fill: true,
                borderColor: tailwindConfig().theme.colors.blue[500],
                borderWidth: 2,
                pointRadius: 5,
                pointBackgroundColor: tailwindConfig().theme.colors.blue[500],
            },
            {
                label: "ƒê·ªô ·∫©m (%)",
                data: humidityData,
                fill: true,
                borderColor: tailwindConfig().theme.colors.green[500],
                borderWidth: 2,
                pointRadius: 5,
                pointBackgroundColor: tailwindConfig().theme.colors.green[500],
            },
        ],
    };

    return (
        <div className="flex flex-col col-span-full sm:col-span-6 bg-white dark:bg-gray-800 shadow-sm rounded-xl">
            <header className="px-5 py-4 border-b border-gray-100 dark:border-gray-700/60 flex items-center">
                <h2 className="font-semibold text-gray-800 dark:text-gray-100">
                    Th·ªùi ti·∫øt t·∫°i v·ªã tr√≠ c·ªßa b·∫°n
                </h2>
                <Tooltip className="ml-2">
                    <div className="text-xs text-center whitespace-nowrap">
                        Built with{" "}
                        <a
                            className="underline"
                            href="https://www.chartjs.org/"
                            target="_blank"
                            rel="noreferrer"
                        >
                            Chart.js
                        </a>
                    </div>
                </Tooltip>
            </header>

            <div className="p-5 text-center">
                {loading ? (
                    <p>ƒêang t·∫£i d·ªØ li·ªáu th·ªùi ti·∫øt...</p>
                ) : error ? (
                    <p className="text-red-500">{error}</p>
                ) : weatherData ? (
                    <>
                        <h3 className="text-lg font-semibold">üìç {address}</h3>
                        <p>Nhi·ªát ƒë·ªô: <strong>{weatherData.main.temp}¬∞C</strong></p>
                        <p>ƒê·ªô ·∫©m: <strong>{weatherData.main.humidity}%</strong></p>
                        <p>M√¥ t·∫£: <strong>{weatherData.weather[0].description}</strong></p>
                    </>
                ) : (
                    <p>Kh√¥ng c√≥ d·ªØ li·ªáu.</p>
                )}
            </div>

            {/* Hi·ªÉn th·ªã b·∫£n ƒë·ªì t·ª´ OpenStreetMap */}
            {location.lat && location.lon && (
                <MapContainer center={[location.lat, location.lon]} zoom={15} style={{ height: "300px", width: "100%" }}>
                    <TileLayer
                        url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                        attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                    />
                    <Marker position={[location.lat, location.lon]}>
                        <Popup>üìç {address}</Popup>
                    </Marker>
                </MapContainer>
            )}
        </div>
    );
}

export default WeatherChart;
